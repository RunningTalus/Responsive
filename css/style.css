body, figure {
  margin: 0;
}

body {
  background: url("../images/tile.png")
}

h1,
h2,
h3,
.logo {
font-family: "Cambo", serif;
}

p {
  font-family: "Nunito", sans-serif;
}

h1,
h2,
h3,
p,
ul,
li{
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
}

a {
  color: #b24e40;
}

/* GRID STYLES */

.row{
  width: 100%;
  max-width: 960px;
  /* for desktop view */
  margin: 0 auto;
  outline: 1px solid darkred;
}

/* clearfix set against the .row class for convenience */
/* Apply the clearfix hack to the .row class to prevent collapsing margins caused by contending float elements */

.row:before,
.row:after {
  content: " ";
  display: table;
}

.row:after {
  clear: both;
}

.grid {
  height: 20px;
  float: left;
  margin: 1%;
  outline: 1px solid hotpink;
}

/* Set the width of a CSS rule that takes the space of one column in the grid.  */
/* This is a mobile grid. */
.m-grid-1 { width: 23%;}
.m-grid-2 { width: 48%;}
.m-gird-3 { width: 73%;}
.m-grid-4 { width: 98%;}


/* Set the width of the CSS rule for one column using a media query that targets devices with a minimum width of 960 pixels.  */
/* This is a desktop grid. */
@media (min-width: 960px) {
  .d-grid-1{ width: 10.5%;}
  .d-grid-2{ width: 23%;}
  .d-grid-3{ width: 35.5%;}
  .d-grid-4{ width: 48%;}
  .d-grid-5{ width: 60.5%;}
  .d-grid-6{ width: 73%;}
  .d-grid-7{ width: 85.5%;}
  .d-grid-8{ width: 98%;}
}

/* GRID STYLES */
#topWrapper {
  width: 100%;
  position: relative;
  overflow-x: hidden;
}

/* Use CSS transitions to animate the canvas.   */
.wrapper {
  width: 100%;
  position: relative;

  -webkit-transition: all 1.0s ease-in-out;
  -moz-transition: all 1.0s ease-in-out;
  -o-transition: all 1.0s ease-in-out;
  transition: all 1.0s ease-in-out;
}
/* END WRAPPER */

/* BEGIN HEADER */

#topHeader {
  position: absolute;
  top: 0;

  width: 100%;
  height: 50px;

  background: #efebe3;
  box-shadow: 0 0 5px #000; /* box-shadow: [x distance] [y distance] [blur] [color] */
}

#infoTray,
#navTray {
  position: absolute;
  top: 0;
  width: 50px;
  height: 50px;

  background-size: 100% auto; /* x=100%, y=auto - scales the image so the proportions are retained. Other options include [auto , cover, contain] */
  background-repeat: no-repeat;
  background-position: center center;
}

#infoTray {
  left: 0;
  /*background-image: url(../images/info.png);*/
}

#navTray {
  right: 0;
  background-image: url(../images/menu.png);
}

.logo {
  color: #450404;
  position: absolute;
  width: 300px;
  height: 50px;
  left: 50%;
  margin-left: -150px;
  font-size: 2em;
  text-align: center;
}

#topHeader .left-tray, #topHeader .right-tray{
  position: absolute;
  width: 200px;
}

/* Use negative positioning to hide off-canvas elements.   */

#topHeader .left-tray { left: -50%;}
#topHeader .right-tray { right: -50%;}

/* Use CSS to support states in our jQuery */

.info-active .wrapper { left: 50%;}
.nav-active .wrapper { right: 50%;}

/* Role has value in accessibility.  High specificity as a CSS selector as it uses both attribute (section) and property (role) selector. */

section[role="main"] {
  padding: 70px 10px 0;
}
/* Padding on top, offsets the header which is position:absolute, and is removed from the DOM order. */
/* Elements positioned absolutely are always positioned relative to their parent element AND according to assigned top, bottom, left, and right coordinates. */

figure {
  width: 100%
}

figure img{
  max-width: 100%;
  height: auto;
}

/* Media query for screens with a min-width of 720 pixels. */

@media (min-width: 720px) {

  .wrapper {
    max-width: 1024px;
    margin: 0 auto;
  }

  /* Hide the navigation */
  #navTray { display: none;}

  #topHeader .right-tray{
    width: auto;
    padding: 10px;
    right: 0;
  }

  #topHeader .logo {
    left: 70px;
    margin-left: 0;
  }

  #infoTray {
    left: 308px;
    width: 25px;
    height: 25px;
  }

  #logo { left: 0;}
}

.article-data {
  width: 30%;
  padding: 5%;
  margin: 0 5% 5% 0;
  float: left;
  background: #ccc;
}

.article-data time {
  display: block;
}

/* Logo and Wrapper */

/** Percentage-based height is ALWAYS relative to an ancestor with an explicit height, BUT percentage-based padding is
ALWAYS consistent (top, bottom, left, right), and ALWAYS relative to the parent element.  THEREFORE, padding-bottom is
relative to the width of a parent element. This trick comes in handy with VIDEO, as it requires a set aspect ratio. */

.logo-wrapper {
  position: relative; /* Step 2: Set the parent element to position: relative */
  width: 100px; /* Step 1: Set the parent element to the desired width. */
  left: 50%;
  margin-left: -50px;
}

#logo {
  position: absolute; /* Step 3: Set the child element to position: absolute */
  overflow: hidden;
  width: 100%;
  height: 0; /* Step 4: Set height: 0.  This leverages padding-bottom to size the object on the page.  */
  padding-bottom: 44%; /* Step 5: Set padding-bottom to determine height base off of .logo-wrapper {width: 100px}. */
  font-size: 0px;
  background-image: url(../images/logo.png) no-repeat;
  background-image: url(../images/logo.svg);
  background-size: cover; /* Scales the image to entirely cover the size of the related object. */
}

.video-wrapper {
  position: relative;
  padding-bottom: 56.25%; /* Padding-bottom sets the wrapper's aspect ratio, because percentage-based padding is set
  against the DOM object's width (instead of the parent element's height, as a height percentage is). */
  height: 0;
  overflow: hidden; /* Overflow:hidden ensures that the object size depends on what's drawn with padding-bottom. */
}

.video-wrapper iframe {
  position: absolute; /* Position: absolute keeps the iframe in place. */
  top: 0; /* top and left set at 0 keep the iframe in the corner*/
  left: 0;
  width: 100%; /* width: 100% fills the parent object completely */
  height: 100%;
}

object {
  height: 400px;
  width: 400px;
  float: right;
}
